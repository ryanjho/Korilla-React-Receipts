{"version":3,"sources":["logo.svg","Data.js","Components/Receipt.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","receipts","person","order","main","protein","rice","sauce","toppings","drink","cost","paid","Receipt","props","handlePay","index","setPaid","this","receipt","className","onClick","Component","App","state","setState","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,8HCgD5BC,G,YAhDE,CACb,CACIC,OAAQ,UACRC,MAAO,CACHC,KAAM,UACNC,QAAS,eACTC,KAAM,cACNC,MAAO,cACPC,SAAU,CACN,gBAAiB,mBAErBC,MAAO,WACPC,KAAM,IAEVC,MAAM,GAEV,CACIT,OAAQ,UACRC,MAAO,CACHC,KAAM,YACNC,QAAS,kBACTC,KAAM,cACNC,MAAO,UACPC,SAAU,CACN,4BAA6B,QAEjCC,MAAO,WACPC,KAAM,IAEVC,MAAM,GAEV,CACIT,OAAQ,OACRC,MAAO,CACHC,KAAM,aACNC,QAAS,eACTC,KAAM,OACNC,MAAO,QACPC,SAAU,CACN,oBAAqB,gBAAiB,cAE1CC,MAAO,8BACPC,KAAM,IAEVC,MAAM,KCjBCC,E,kDAxBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEVC,UAAY,SAACC,GACT,EAAKF,MAAMG,QAAQ,EAAKH,MAAME,QAJf,E,qDAMT,IAAD,EACqBE,KAAKJ,MAAMK,QAA7BhB,EADH,EACGA,OAAQC,EADX,EACWA,MAChB,OACI,yBAAKgB,UAAU,WACX,wBAAIA,UAAU,eAAejB,GAC7B,oCAAUC,EAAMC,MAChB,uCAAaD,EAAME,SACnB,oCAAUF,EAAMG,MAChB,qCAAWH,EAAMI,OACjB,oCAAUJ,EAAMM,OAChB,mCAASN,EAAMO,MACf,4BAAQU,QAASH,KAAKH,WAAtB,qB,GAlBMO,aC8BPC,E,kDAxBb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAKRG,QAAU,SAAAD,GACY,EAAKQ,MAAMtB,SAC/BA,EAASc,GAAOJ,MAAQV,EAASc,GAAOJ,KACxC,EAAKa,SAAS,CAAEvB,SAAUA,KAP1B,EAAKsB,MAAQ,CACXtB,SAAUA,GAHK,E,qDAWT,IAAD,OACP,OACE,yBAAKkB,UAAU,qBACZF,KAAKM,MAAMtB,SAASwB,KAAK,SAACP,EAASH,GAClC,OACEG,EAAQP,KAAO,GAAK,kBAAC,EAAD,CAASO,QAAWA,EAASH,MAAOA,EAAOC,QAAS,EAAKA,kB,GAjBvEK,aCKEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c62f0697.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const receipts = [\n    {\n        person: 'Karolin',\n        order: {\n            main: 'Burrito',\n            protein: 'Organic Tofu',\n            rice: 'Purple Rice',\n            sauce: 'Green Crack',\n            toppings: [\n                'Baby Bok Choy', 'Cucumber Kimchi'\n            ],\n            drink: 'Korchata',\n            cost: 22\n        },\n        paid: false\n    },\n    {\n        person: 'Jerrica',\n        order: {\n            main: 'Rice Bowl',\n            protein: 'Ginger Soy Chix',\n            rice: 'Sticky Rice',\n            sauce: 'Korilla',\n            toppings: [\n                'Yuzu Pickled Sweet Pepper', 'Kale'\n            ],\n            drink: 'Korchata',\n            cost: 19\n        },\n        paid: false\n    },\n    {\n        person: 'Matt',\n        order: {\n            main: 'Salad Bowl',\n            protein: 'Organic Tofu',\n            rice: 'none',\n            sauce: \"K'lla\",\n            toppings: [\n                'Blue Potato Salad', 'Pico De Gallo', 'Red Kimchi'\n            ],\n            drink: 'Sparkling Blood Orange Soda',\n            cost: 20\n        },\n        paid: false\n    }\n]\n\nexport default receipts;","import React, { Component } from 'react';\n\nclass Receipt extends Component {\n    constructor(props) {\n        super(props);\n    }\n    handlePay = (index) => {\n        this.props.setPaid(this.props.index);\n    }\n    render() {\n        const { person, order } = this.props.receipt;\n        return (\n            <div className=\"receipt\">\n                <h1 className=\"person-name\">{person}</h1>\n                <p>Main: {order.main}</p>\n                <p>Protein: {order.protein}</p>\n                <p>Rice: {order.rice}</p>\n                <p>Sauce: {order.sauce}</p>\n                <p>Drink {order.drink}</p>\n                <p>Cost {order.cost}</p>\n                <button onClick={this.handlePay}>Pay For This</button>\n            </div>\n\n        )\n    }\n}\n\nexport default Receipt;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport receipts from './Data';\nimport Receipt from './Components/Receipt';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      receipts: receipts\n    }\n  }\n  setPaid = index => {\n    const newReceipts = this.state.receipts;\n    receipts[index].paid = !receipts[index].paid;\n    this.setState({ receipts: receipts});\n  }\n  render() {\n    return (\n      <div className=\"receipt-container\">\n        {this.state.receipts.map( (receipt, index) => {\n          return ( \n            receipt.paid ? '' : <Receipt receipt = {receipt} index={index} setPaid={this.setPaid} />\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}